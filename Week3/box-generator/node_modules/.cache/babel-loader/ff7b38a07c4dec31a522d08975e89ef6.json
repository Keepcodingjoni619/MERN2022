{"ast":null,"code":"var _jsxFileName = \"/Users/johnniecandari/Desktop/MERN2022/Week3/box-generator/src/components/NinjaForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NinjaForm = props => {\n  _s();\n\n  // using the getter and setter that were passed from my parent (App.js) component\n  const {\n    ninjaBoxArray,\n    setNinjaBoxArray\n  } = props; // create state that can only be seen by this component\n  //    this is the state to keep track of the text box input value\n\n  const [color, setColor] = useState(\"\");\n  const [size, setSize] = useState(50);\n\n  const submitHandler = event => {\n    // we must prevent the browser from refreshing the page when a form is submitted\n    //    if we do not prevent the default behavior we will lose all values in state\n    event.preventDefault(); // add our new box object to the ninjaBoxArray WITHOUT losing what is already in there\n    //    we need to create a new array and spread out the current objects first\n    //    then we add the new box object as the last element in the array\n\n    setNinjaBoxArray([...ninjaBoxArray, {\n      color: color,\n      // be sure to add the px to the string so it can update the style correctly\n      size: size + \"px\"\n    }]); // Ninja Bonus: clear out the color input and reset to the default size value\n    //    on successful submission.\n    // This makes it easier to add a new color once we submit the first one\n\n    setColor(\"\");\n    setSize(50);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      style: {\n        margin: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"color\",\n          value: color,\n          onChange: e => setColor(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Width and Height in Pixels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"size\",\n          value: size,\n          onChange: e => setSize(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NinjaForm, \"/EcyXPrvdeUb45FTN6633PTItA0=\");\n\n_c = NinjaForm;\nexport default NinjaForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NinjaForm\");","map":{"version":3,"names":["React","useState","NinjaForm","props","ninjaBoxArray","setNinjaBoxArray","color","setColor","size","setSize","submitHandler","event","preventDefault","margin","e","target","value"],"sources":["/Users/johnniecandari/Desktop/MERN2022/Week3/box-generator/src/components/NinjaForm.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst NinjaForm = (props) => {\n  // using the getter and setter that were passed from my parent (App.js) component\n  const { ninjaBoxArray, setNinjaBoxArray } = props;\n\n  // create state that can only be seen by this component\n  //    this is the state to keep track of the text box input value\n  const [ color, setColor] = useState(\"\");\n  const [ size, setSize] = useState(50);\n  \n  const submitHandler = (event) => {\n    // we must prevent the browser from refreshing the page when a form is submitted\n    //    if we do not prevent the default behavior we will lose all values in state\n    event.preventDefault();\n\n    // add our new box object to the ninjaBoxArray WITHOUT losing what is already in there\n    //    we need to create a new array and spread out the current objects first\n    //    then we add the new box object as the last element in the array\n    setNinjaBoxArray( [ \n      ...ninjaBoxArray, \n      { \n        color: color,\n        // be sure to add the px to the string so it can update the style correctly\n        size: size + \"px\",\n      }\n      ] );\n\n    // Ninja Bonus: clear out the color input and reset to the default size value\n    //    on successful submission.\n    // This makes it easier to add a new color once we submit the first one\n    setColor(\"\");\n    setSize(50);\n  }\n\n  return (\n    <div>\n      <form onSubmit={ submitHandler } style={{ margin: \"20px\" }}>\n        <div>\n          <label>Color</label>\n          {/* \n            Ninja Bonus: clear out the color input on successful submission\n            By setting our input value to be the value in state, we can reset \n            it after successful submission \n          */}\n          <input \n            type=\"text\" \n            name=\"color\"\n            value={color}\n            onChange={ (e) => setColor(e.target.value) }\n          />\n        </div>\n        <div>\n          <label>Width and Height in Pixels</label>\n          {/* \n            Ninja Bonus: reset the size input on successful submission\n            By setting our input value to be the value in state, we can reset \n            it after successful submission \n          */}\n          <input \n            type=\"text\" \n            name=\"size\"\n            value={size}\n            onChange={ (e) => setSize(e.target.value) }\n          />\n        </div>\n        <button>Add</button>\n      </form>\n\n  </div>\n  )\n}\n\nexport default NinjaForm;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAAA;;EAC3B;EACA,MAAM;IAAEC,aAAF;IAAiBC;EAAjB,IAAsCF,KAA5C,CAF2B,CAI3B;EACA;;EACA,MAAM,CAAEG,KAAF,EAASC,QAAT,IAAqBN,QAAQ,CAAC,EAAD,CAAnC;EACA,MAAM,CAAEO,IAAF,EAAQC,OAAR,IAAmBR,QAAQ,CAAC,EAAD,CAAjC;;EAEA,MAAMS,aAAa,GAAIC,KAAD,IAAW;IAC/B;IACA;IACAA,KAAK,CAACC,cAAN,GAH+B,CAK/B;IACA;IACA;;IACAP,gBAAgB,CAAE,CAChB,GAAGD,aADa,EAEhB;MACEE,KAAK,EAAEA,KADT;MAEE;MACAE,IAAI,EAAEA,IAAI,GAAG;IAHf,CAFgB,CAAF,CAAhB,CAR+B,CAiB/B;IACA;IACA;;IACAD,QAAQ,CAAC,EAAD,CAAR;IACAE,OAAO,CAAC,EAAD,CAAP;EACD,CAtBD;;EAwBA,oBACE;IAAA,uBACE;MAAM,QAAQ,EAAGC,aAAjB;MAAiC,KAAK,EAAE;QAAEG,MAAM,EAAE;MAAV,CAAxC;MAAA,wBACE;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAOE;UACE,IAAI,EAAC,MADP;UAEE,IAAI,EAAC,OAFP;UAGE,KAAK,EAAEP,KAHT;UAIE,QAAQ,EAAIQ,CAAD,IAAOP,QAAQ,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV;QAJ5B;UAAA;UAAA;UAAA;QAAA,QAPF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAeE;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAOE;UACE,IAAI,EAAC,MADP;UAEE,IAAI,EAAC,MAFP;UAGE,KAAK,EAAER,IAHT;UAIE,QAAQ,EAAIM,CAAD,IAAOL,OAAO,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV;QAJ3B;UAAA;UAAA;UAAA;QAAA,QAPF;MAAA;QAAA;QAAA;QAAA;MAAA,QAfF,eA6BE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QA7BF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAoCD,CArED;;GAAMd,S;;KAAAA,S;AAuEN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}