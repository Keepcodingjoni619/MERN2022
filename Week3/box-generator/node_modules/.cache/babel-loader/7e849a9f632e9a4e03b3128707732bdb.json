{"ast":null,"code":"var _jsxFileName = \"/Users/johnniecandari/Desktop/MERN2022/Week3/box-generator/src/components/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = props => {\n  _s();\n\n  // using the getter and setter that were passed from my parent (App.js) component\n  const {\n    boxColorArray,\n    setBoxColorArray\n  } = props; // create state that can only be seen by this component\n  //    this is the state to keep track of the text box input value\n\n  const [color, setColor] = useState(\"\");\n\n  const submitHandler = event => {\n    // we must prevent the browser from refreshing the page when a form is submitted\n    //    if we do not prevent the default behavior we will lose all values in state\n    event.preventDefault(); // add our new color to the boxArray WITHOUT losing what is already in there\n    //    we need to create a new array and spread out the current values first\n    //    then we add the new color as the last element in the array\n\n    setBoxColorArray([...boxColorArray, color]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      style: {\n        margin: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"firstName\",\n          children: \"Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"color\",\n          onChange: e => setColor(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"9Ufmb6kiII75QoOjngqi2ks+0+M=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","Form","props","boxColorArray","setBoxColorArray","color","setColor","submitHandler","event","preventDefault","margin","e","target","value"],"sources":["/Users/johnniecandari/Desktop/MERN2022/Week3/box-generator/src/components/Form.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Form = (props) => {\n  // using the getter and setter that were passed from my parent (App.js) component\n  const { boxColorArray, setBoxColorArray } = props;\n\n  // create state that can only be seen by this component\n  //    this is the state to keep track of the text box input value\n  const [ color, setColor] = useState(\"\");\n  \n  const submitHandler = (event) => {\n    // we must prevent the browser from refreshing the page when a form is submitted\n    //    if we do not prevent the default behavior we will lose all values in state\n    event.preventDefault();\n\n    // add our new color to the boxArray WITHOUT losing what is already in there\n    //    we need to create a new array and spread out the current values first\n    //    then we add the new color as the last element in the array\n    setBoxColorArray( [ ...boxColorArray, color ] );\n  }\n\n  return (\n    <div>\n      <form onSubmit={ submitHandler } style={{ margin: \"20px\" }}>\n        <div>\n          <label htmlFor=\"firstName\">Color</label>\n          <input \n            type=\"text\" \n            name=\"color\"\n            onChange={ (e) => setColor(e.target.value) }\n          />\n        </div>\n        <button>Add</button>\n      </form>\n\n  </div>\n  )\n}\n\nexport default Form;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;EAAA;;EACtB;EACA,MAAM;IAAEC,aAAF;IAAiBC;EAAjB,IAAsCF,KAA5C,CAFsB,CAItB;EACA;;EACA,MAAM,CAAEG,KAAF,EAASC,QAAT,IAAqBN,QAAQ,CAAC,EAAD,CAAnC;;EAEA,MAAMO,aAAa,GAAIC,KAAD,IAAW;IAC/B;IACA;IACAA,KAAK,CAACC,cAAN,GAH+B,CAK/B;IACA;IACA;;IACAL,gBAAgB,CAAE,CAAE,GAAGD,aAAL,EAAoBE,KAApB,CAAF,CAAhB;EACD,CATD;;EAWA,oBACE;IAAA,uBACE;MAAM,QAAQ,EAAGE,aAAjB;MAAiC,KAAK,EAAE;QAAEG,MAAM,EAAE;MAAV,CAAxC;MAAA,wBACE;QAAA,wBACE;UAAO,OAAO,EAAC,WAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,MADP;UAEE,IAAI,EAAC,OAFP;UAGE,QAAQ,EAAIC,CAAD,IAAOL,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV;QAH5B;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eASE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAgBD,CAnCD;;GAAMZ,I;;KAAAA,I;AAqCN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}